/**
 * @file    types.h
 * @author  Luiz Felipe (felipe.silva337@yahoo.com)
 * @brief   Header file declaring types used in Lia
 * @version 0.1
 * @date    2020-05-01
 * 
 * @copyright Copyright (c) 2020 Luiz Felipe
 */
#ifndef _LIA_TYPES_H
#define _LIA_TYPES_H

#include <inttypes.h>
#include "tree.h"

/** Token maximum size + 1 */
#define TKMAX 129

/** Number of arguments to a command */
#define CMD_ARGC 3

/** List of register's names in Ases */
#define REGLIST "abcdp"

/** The arguments of the keyword's function */
#define KEY_ARGS  char *filename, token_t *tk, lia_t *lia


/** Enumeration to token's type. */
typedef enum token_type {
  TK_EOF,
  TK_ID,
  TK_SEPARATOR,
  TK_OPENBRACKET,
  TK_CLOSEBRACKET,
  TK_COLON,
  TK_COMMA,
  TK_EQUAL,
  TK_IMMEDIATE,
  TK_CHAR,
  TK_STRING
} token_type_t;

/** Structure of a token */
typedef struct token {
  struct token *next;
  struct token *last;
  int line;
  int column;

  token_type_t type;
  char text[TKMAX];
  uint8_t value;
} token_t;


/** Type of a instruction */
typedef enum inst_type {
  INST_FUNC,
  INST_CMD
} inst_type_t;

/** Instructions' list generated by parser */
typedef struct inst {
  struct inst *next;
  token_t *child;

  inst_type_t type;
} inst_t;


/** Argument to a command */
typedef struct cmd_arg {
  int name;
  int type;
} cmd_arg_t;

/** Binary tree for commands */
typedef struct cmd {
  EXTENDS_TREE(cmd);

  cmd_arg_t args[CMD_ARGC];
  char *body;
} cmd_t;

/** Operand's union */
typedef union operand {
  char reg[5];
  uint8_t imm;
  char *procedure;
} operand_t;


/** Binary tree for procedures */
typedef struct proc {
  EXTENDS_TREE(proc);

  unsigned int index;
  inst_t *body;
} proc_t;

/** A Lia's struct reserving all informations about a code */
typedef struct lia {
  token_t *tklist;   /**< The tokens' list */
  proc_t *proctree;  /**< The procedures' tree */
  cmd_t *cmdtree;    /**< The commands' tree */
  inst_t *instlist;  /**< The instructions' list */
} lia_t;

/** Meta-keywords */
typedef enum metakeyword {
  META_NONE,
  META_NEW,
  META_IMPORT
} metakeyword_t;

/** Keywords */
typedef enum keyword {
  KEY_NONE,
  KEY_FUNC
} keyword_t;

#endif /* _LIA_TYPES_H */