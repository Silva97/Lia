#####
# Developed by Luiz Felipe <felipe.silva337@yahoo.com>
# Date: 2020-05-04
# GitHub: https://github.com/Silva97
# Distributed under the MIT License.
#
# This module is the main module of the Lia language that defines commands
# to do basic operations.
#####



##
# Calling procedures with immediate arguments
# rc = argument1
# rd = argument2
##
[new cl1 r:p x:i     = "XcR"]
[new cl2 r:p x:i y:i = "XcYdR"]

##
# ss = 0 if op1 is greater than op2.
# if op1 >  op2: ss = 0
# if op1 <= op2: ss = 1
##
[new grt  x:r y:r = "Y!Xa=b9"]
[new igrt x:r y:i = "XaYb9"]

## ss = 0 if the values are equal ##
[new equ  x:r y:r = "XaY5A"]
[new iequ x:r y:i = "XaY5A"]

## Takes the input and store it in the op1 ##
[new in x:r = "0x"]

## Outputs the op1 ##
[new out  x:r = "X1"]
[new iout x:i = "X1"]

## Exit the program with exit status at op1 ##
[new exit  x:r = "X3"]
[new iexit x:i = "X3"]


## Sets the value of the register to a immediate operand ##
[new set x:r y:i = "Yx"]

## Copy the value of op2 to op1 ##
[new mov x:r y:r = "Yx"]

## Change the value of op1 and op2 ##
[new chg x:r y:r = "Y!Xy=x"]

## Adds to op1 the value of op2 ##
[new add  x:r y:r = "XaY4Ax"]
[new iadd x:r y:i = "XaY4Ax"]

## Subtracts op1 the value of op2 ##
[new sub  x:r y:r = "XaY5Ax"]
[new isub x:r y:i = "XaY5Ax"]

## Increments the value of op1 ##
[new inc x:r = "X+x"]

## Decrements the value of op1 ##
[new dec x:r = "X-x"]

## Multiplies op1 by op2 ##
[new mul  x:r y:r = "Y!Xab.x=?(-! $B4 =-!~*Ax@"]
[new imul x:r y:i = "Y!Xab.x=?(-! $B4 =-!~*Ax@"]

##
# Divide op1 by op2
# op1 = result
# ra = modulus
##
[new div  x:r y:r = "Y!Xa=b?2 .!$B5=+!9?*=x A!B5A~(X+x@A?(=a@"]
[new idiv x:r y:i = "XaYb?2 .!$B5=+!9?*=x A!B5A~(X+x@A?(=a@"]

## do..while block for loops. ##
[new do      = "$L!>"]
[new whilez  = "!<=l>=<?*"]
[new whilenz = "!<=l>=<~*"]